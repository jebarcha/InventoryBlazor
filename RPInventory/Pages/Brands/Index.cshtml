@page
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model RPInventory.Pages.Brands.IndexModel

@{
    ViewData["Title"] = "Brands";
}

@await Html.PartialAsync("Actions/_CreateSearch", new CreateSearchViewModel {
    SearchTerm = Model.SearchTerm,
    TitleCreate = "Create Brand",
    TotalRecords = Model.TotalRecords
})



<table class="table table-hover table-bordered table-striped">
    <thead class="bg-primary text-white">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Brands[0].Name)
            </th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Brands) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td class="text-center">
               <partial name="Actions/_Crud" model="item.Id"/>
            </td>
        </tr>
}
    </tbody>
</table>

@Html.PagedListPager(Model.Brands, page => Url.Action("Index", new {
    Page = page,
    SearchTerm = Model.SearchTerm
}),
    new PagedListRenderOptions {
        LiElementClasses = new string[]{"page-item"},
        PageClasses = new string[] {"page-link"}
    }
)